/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as PlayersRouteImport } from './routes/players'
import { Route as MatchesRouteImport } from './routes/matches'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlayersLinkRouteImport } from './routes/players.link'
import { Route as MatchMatchIdRouteImport } from './routes/match.$matchId'
import { Route as MatchMatchIdSummaryRouteImport } from './routes/match.$matchId.summary'
import { Route as MatchMatchIdSetupRouteImport } from './routes/match.$matchId.setup'
import { Route as MatchMatchIdConfigureRouteImport } from './routes/match.$matchId.configure'
import { Route as MatchMatchIdGameGameNumberRouteImport } from './routes/match.$matchId.game.$gameNumber'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayersRoute = PlayersRouteImport.update({
  id: '/players',
  path: '/players',
  getParentRoute: () => rootRouteImport,
} as any)
const MatchesRoute = MatchesRouteImport.update({
  id: '/matches',
  path: '/matches',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayersLinkRoute = PlayersLinkRouteImport.update({
  id: '/link',
  path: '/link',
  getParentRoute: () => PlayersRoute,
} as any)
const MatchMatchIdRoute = MatchMatchIdRouteImport.update({
  id: '/match/$matchId',
  path: '/match/$matchId',
  getParentRoute: () => rootRouteImport,
} as any)
const MatchMatchIdSummaryRoute = MatchMatchIdSummaryRouteImport.update({
  id: '/summary',
  path: '/summary',
  getParentRoute: () => MatchMatchIdRoute,
} as any)
const MatchMatchIdSetupRoute = MatchMatchIdSetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => MatchMatchIdRoute,
} as any)
const MatchMatchIdConfigureRoute = MatchMatchIdConfigureRouteImport.update({
  id: '/configure',
  path: '/configure',
  getParentRoute: () => MatchMatchIdRoute,
} as any)
const MatchMatchIdGameGameNumberRoute =
  MatchMatchIdGameGameNumberRouteImport.update({
    id: '/game/$gameNumber',
    path: '/game/$gameNumber',
    getParentRoute: () => MatchMatchIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/matches': typeof MatchesRoute
  '/players': typeof PlayersRouteWithChildren
  '/users': typeof UsersRoute
  '/match/$matchId': typeof MatchMatchIdRouteWithChildren
  '/players/link': typeof PlayersLinkRoute
  '/match/$matchId/configure': typeof MatchMatchIdConfigureRoute
  '/match/$matchId/setup': typeof MatchMatchIdSetupRoute
  '/match/$matchId/summary': typeof MatchMatchIdSummaryRoute
  '/match/$matchId/game/$gameNumber': typeof MatchMatchIdGameGameNumberRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/matches': typeof MatchesRoute
  '/players': typeof PlayersRouteWithChildren
  '/users': typeof UsersRoute
  '/match/$matchId': typeof MatchMatchIdRouteWithChildren
  '/players/link': typeof PlayersLinkRoute
  '/match/$matchId/configure': typeof MatchMatchIdConfigureRoute
  '/match/$matchId/setup': typeof MatchMatchIdSetupRoute
  '/match/$matchId/summary': typeof MatchMatchIdSummaryRoute
  '/match/$matchId/game/$gameNumber': typeof MatchMatchIdGameGameNumberRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/matches': typeof MatchesRoute
  '/players': typeof PlayersRouteWithChildren
  '/users': typeof UsersRoute
  '/match/$matchId': typeof MatchMatchIdRouteWithChildren
  '/players/link': typeof PlayersLinkRoute
  '/match/$matchId/configure': typeof MatchMatchIdConfigureRoute
  '/match/$matchId/setup': typeof MatchMatchIdSetupRoute
  '/match/$matchId/summary': typeof MatchMatchIdSummaryRoute
  '/match/$matchId/game/$gameNumber': typeof MatchMatchIdGameGameNumberRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/matches'
    | '/players'
    | '/users'
    | '/match/$matchId'
    | '/players/link'
    | '/match/$matchId/configure'
    | '/match/$matchId/setup'
    | '/match/$matchId/summary'
    | '/match/$matchId/game/$gameNumber'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/matches'
    | '/players'
    | '/users'
    | '/match/$matchId'
    | '/players/link'
    | '/match/$matchId/configure'
    | '/match/$matchId/setup'
    | '/match/$matchId/summary'
    | '/match/$matchId/game/$gameNumber'
  id:
    | '__root__'
    | '/'
    | '/matches'
    | '/players'
    | '/users'
    | '/match/$matchId'
    | '/players/link'
    | '/match/$matchId/configure'
    | '/match/$matchId/setup'
    | '/match/$matchId/summary'
    | '/match/$matchId/game/$gameNumber'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MatchesRoute: typeof MatchesRoute
  PlayersRoute: typeof PlayersRouteWithChildren
  UsersRoute: typeof UsersRoute
  MatchMatchIdRoute: typeof MatchMatchIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/players': {
      id: '/players'
      path: '/players'
      fullPath: '/players'
      preLoaderRoute: typeof PlayersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/matches': {
      id: '/matches'
      path: '/matches'
      fullPath: '/matches'
      preLoaderRoute: typeof MatchesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/players/link': {
      id: '/players/link'
      path: '/link'
      fullPath: '/players/link'
      preLoaderRoute: typeof PlayersLinkRouteImport
      parentRoute: typeof PlayersRoute
    }
    '/match/$matchId': {
      id: '/match/$matchId'
      path: '/match/$matchId'
      fullPath: '/match/$matchId'
      preLoaderRoute: typeof MatchMatchIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/match/$matchId/summary': {
      id: '/match/$matchId/summary'
      path: '/summary'
      fullPath: '/match/$matchId/summary'
      preLoaderRoute: typeof MatchMatchIdSummaryRouteImport
      parentRoute: typeof MatchMatchIdRoute
    }
    '/match/$matchId/setup': {
      id: '/match/$matchId/setup'
      path: '/setup'
      fullPath: '/match/$matchId/setup'
      preLoaderRoute: typeof MatchMatchIdSetupRouteImport
      parentRoute: typeof MatchMatchIdRoute
    }
    '/match/$matchId/configure': {
      id: '/match/$matchId/configure'
      path: '/configure'
      fullPath: '/match/$matchId/configure'
      preLoaderRoute: typeof MatchMatchIdConfigureRouteImport
      parentRoute: typeof MatchMatchIdRoute
    }
    '/match/$matchId/game/$gameNumber': {
      id: '/match/$matchId/game/$gameNumber'
      path: '/game/$gameNumber'
      fullPath: '/match/$matchId/game/$gameNumber'
      preLoaderRoute: typeof MatchMatchIdGameGameNumberRouteImport
      parentRoute: typeof MatchMatchIdRoute
    }
  }
}

interface PlayersRouteChildren {
  PlayersLinkRoute: typeof PlayersLinkRoute
}

const PlayersRouteChildren: PlayersRouteChildren = {
  PlayersLinkRoute: PlayersLinkRoute,
}

const PlayersRouteWithChildren =
  PlayersRoute._addFileChildren(PlayersRouteChildren)

interface MatchMatchIdRouteChildren {
  MatchMatchIdConfigureRoute: typeof MatchMatchIdConfigureRoute
  MatchMatchIdSetupRoute: typeof MatchMatchIdSetupRoute
  MatchMatchIdSummaryRoute: typeof MatchMatchIdSummaryRoute
  MatchMatchIdGameGameNumberRoute: typeof MatchMatchIdGameGameNumberRoute
}

const MatchMatchIdRouteChildren: MatchMatchIdRouteChildren = {
  MatchMatchIdConfigureRoute: MatchMatchIdConfigureRoute,
  MatchMatchIdSetupRoute: MatchMatchIdSetupRoute,
  MatchMatchIdSummaryRoute: MatchMatchIdSummaryRoute,
  MatchMatchIdGameGameNumberRoute: MatchMatchIdGameGameNumberRoute,
}

const MatchMatchIdRouteWithChildren = MatchMatchIdRoute._addFileChildren(
  MatchMatchIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MatchesRoute: MatchesRoute,
  PlayersRoute: PlayersRouteWithChildren,
  UsersRoute: UsersRoute,
  MatchMatchIdRoute: MatchMatchIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
