/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MatchRouteImport } from './routes/_match'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MatchSummaryRouteImport } from './routes/_match.summary'
import { Route as MatchSetupRouteImport } from './routes/_match.setup'
import { Route as MatchGameRouteImport } from './routes/_match.game'

const MatchRoute = MatchRouteImport.update({
  id: '/_match',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MatchSummaryRoute = MatchSummaryRouteImport.update({
  id: '/summary',
  path: '/summary',
  getParentRoute: () => MatchRoute,
} as any)
const MatchSetupRoute = MatchSetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => MatchRoute,
} as any)
const MatchGameRoute = MatchGameRouteImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => MatchRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/game': typeof MatchGameRoute
  '/setup': typeof MatchSetupRoute
  '/summary': typeof MatchSummaryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/game': typeof MatchGameRoute
  '/setup': typeof MatchSetupRoute
  '/summary': typeof MatchSummaryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_match': typeof MatchRouteWithChildren
  '/_match/game': typeof MatchGameRoute
  '/_match/setup': typeof MatchSetupRoute
  '/_match/summary': typeof MatchSummaryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/game' | '/setup' | '/summary'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/game' | '/setup' | '/summary'
  id:
    | '__root__'
    | '/'
    | '/_match'
    | '/_match/game'
    | '/_match/setup'
    | '/_match/summary'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MatchRoute: typeof MatchRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_match': {
      id: '/_match'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MatchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_match/summary': {
      id: '/_match/summary'
      path: '/summary'
      fullPath: '/summary'
      preLoaderRoute: typeof MatchSummaryRouteImport
      parentRoute: typeof MatchRoute
    }
    '/_match/setup': {
      id: '/_match/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof MatchSetupRouteImport
      parentRoute: typeof MatchRoute
    }
    '/_match/game': {
      id: '/_match/game'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof MatchGameRouteImport
      parentRoute: typeof MatchRoute
    }
  }
}

interface MatchRouteChildren {
  MatchGameRoute: typeof MatchGameRoute
  MatchSetupRoute: typeof MatchSetupRoute
  MatchSummaryRoute: typeof MatchSummaryRoute
}

const MatchRouteChildren: MatchRouteChildren = {
  MatchGameRoute: MatchGameRoute,
  MatchSetupRoute: MatchSetupRoute,
  MatchSummaryRoute: MatchSummaryRoute,
}

const MatchRouteWithChildren = MatchRoute._addFileChildren(MatchRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MatchRoute: MatchRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
